import syntax_tree;

export {
	simplifyTree(ar:AlgExp) -> AlgExp;
	extractArgs(ar:AlgExp) -> [AlgExp];
}

simplifyTree(ar:AlgExp) -> AlgExp {
	//transform and extract signs like x + (-y) = x-y
	it0 = foldSigns(ar);
	//Find simple expression like a^1, a+0, a*0, a-0 etc
	it1 = removeTrivialExp(it0);
	it2 = foldSigns(it1);
	//Simplify more complex expression like (x-y) + (x+y) = 2x
	it3 = foldExpressions(it2);

	if(ar == it3)
		ar
	else
		simplifyTree(it3);	
} 

foldSigns(ar:AlgExp) -> AlgExp {
	it = extractSign(ar);

	if(it.second == ar) {
	{
		if(it.first == -1)
			ArMult(ArDouble(-1.0), it.second)
		else
			it.second;	
	}
	}else
	{
		if(it.first == -1)
		{
			if(getD(it.second).first)
				ArDouble(getD(it.second).second * -1.0)
			else
				foldSigns(ArMult(ArDouble(-1.0), it.second));
		}
		else
			foldSigns(it.second);
	} //(((0-36)+ 36)+(awd*((c*5)-(c*((5-3)-(0-3))))))
}

foldExpressions(ar:AlgExp) -> AlgExp {
	it = execSimplifier(ar, \op, ar0 -> {
		args = extractArgs(ar0);
		if(length(args) == 2)
		{
			p0 = foldSigns(args[0]);
			p1 = foldSigns(args[1]);
			op0 = detectType(p0);
			op1 = detectType(p1);
			arg0 = extractArgs(p0);
			arg1 = extractArgs(p1);

			if(op == "+") {
				if(op0 == "+" && op1 == "-") {
					if(arg1[1] == arg0[0])//(x+y)+(z-x) = y+z
						AlgSum(arg0[1], arg1[0])
					else if(arg1[1] == arg0[1])//(y+x)+(z-x) = y+z
						AlgSum(arg0[0], arg1[0])
					else ar0;	
				}else if(op0 == "-" && op1 == "+") {
					if(arg0[1] == arg1[0]) //(y-x)+(x+z) = y+z
						AlgSum(arg0[0], arg1[1])
					else if(arg0[1] == arg1[1]) //(y-x)+(z+x) = y+z
						AlgSum(arg0[0], arg1[0])
					else ar0;
				}else if(op0 == "-" && op1 == "-") {
					if(arg0[0] == arg1[1]) //(x-y)+(z-x) = -y+z = z-y
						AlgMin(arg1[0], arg0[1])
					else ar0;	
				}else if(isAtom(arg1[0]) || isAtom(arg0[0]))
				{
					if(op0 == "-" && arg0[1] == arg1[0]) arg0[0] // (x-y)+y = x
					else if(op1 == "-" && arg1[1] == arg0[0]) arg1[0] // y+(x-y) = x
					else ar0;	
				}else ar0;
			}else if(op == "-") {
				if(op0 == "+" && op1 == "-") {
					if(arg1[0] == arg0[0]) // (x+y)-(y-z) = x+z
						AlgSum(arg0[1], arg1[1])
					else if(arg1[0] == arg0[1]) // (y+x)-(y-z) = x+z
						AlgSum(arg0[0], arg1[1])	
					else
						ar0;	
				}else if(op0 == "-" && op1 == "+") {
					if(arg0[0] == arg1[1]) // (y-x)-(z+y) = -1 * (x+z)
						AlgMult(AlgDouble(-1.0), AlgSum(arg0[1], arg1[0]))
					else if(arg0[0] == arg1[0]) // (y-x)-(y+z) = -1 * (x+z)
						AlgMult(AlgDouble(-1.0), AlgSum(arg0[1], arg1[1]))
					else ar0;	
				}else if(op0 == "-" && op1 == "-") {
					if(arg0[1] == arg1[1]) // (x-y)-(z-y) = x-z
						AlgMin(arg0[0],arg1[0])
					else ar0;
				}else if(op0 == "+" && op1 == "+") {// (x+y)-(z+y) = x-z
					if(arg0[0] == arg1[1]) 
						AlgMin(arg0[1],arg1[0])
					else if(arg0[0] == arg1[0]) 
						AlgMin(arg0[1],arg1[1])
					else if(arg0[1] == arg1[1]) 
						AlgMin(arg0[0],arg1[0])
					else if(arg0[1] == arg1[0]) 
						AlgMin(arg0[0],arg1[1])
					else ar0;
				}else if(isAtom(arg1[0]) || isAtom(arg0[0]))
				{
					if(op0 == "+" && arg0[1] == arg1[0]) arg0[0] // (x+y)-y = x
					else if(op0 == "+" && arg0[0] == arg1[0]) arg0[1]  // (y+x)-y = x
					else if(op0 == "-" && arg0[0] == arg1[0]) AlgMult(AlgDouble(-1.0), arg0[1]) // (y-x)-y
					else if(op1 == "+" && arg0[0] == arg1[0]) AlgMult(AlgDouble(-1.0), arg1[1]) // y-(y+x) = -x
					else if(op1 == "+" && arg0[0] == arg1[1]) AlgMult(AlgDouble(-1.0), arg1[0]) // y-(x+y) = -x
					else if(op1 == "-" && arg0[0] == arg1[0]) arg1[1] // y-(y-x) = x
					else ar0;	
				}else ar0;
			}else ar0;
		}else ar0;
	});

	if(it == ar)
		it
	else
		foldExpressions(it);
} 

removeTrivialExp(ar:AlgExp) -> AlgExp {
	it = execSimplifier(ar, \op, ar0 -> {
		args = extractArgs(ar0);
		if(length(args) == 2)
		{
			flag0 = getD(args[0]).first;
			flag1 = getD(args[1]).first;
			l0 = getD(args[0]).second;
			r0 = getD(args[1]).second;

			if(op == "*")
			{
				if(r0 == 0.0 || l0 == 0.0)//x*0 or 0*r
					AlgDouble(0.0)
				else if(r0 == 1.0)//x*1 or 1*x
					args[0]
				else if(l0 == 1.0)
					args[1]
				else if(flag0 && flag1)
					AlgDouble(l0 * r0)
				else ar0;	
			}else if(op == "/") {
				if(l0 == 0.0)// 0/x
					AlgDouble(0.0)
				else if(r0 == 1.0)// x/1
					args[0]
				else if(args[0] == args[1])// x/x
					AlgDouble(1.0)
				else if(flag0 && flag1)
					AlgDouble(l0 / r0)
				else ar0;
			}else if(op == "-") {
				if(args[0] == args[1]) // x-x
					AlgDouble(0.0)
				else if(r0 == 0.0)// x-0
					args[0]
				else if(flag0 && flag1)
					AlgDouble(l0 - r0)
				else ar0;
			}else if(op == "+") {
				if(l0 == 0.0)// 0+x
					args[1]
				else if(r0 == 0.0)// x+0
					args[0]
				else if(args[0] == args[1]) // x+x = 2x
					AlgMult(AlgDouble(2.0), args[0])
				else if(flag0 && flag1)
					AlgDouble(l0 + r0)
				else ar0;	
			}else if(op == "ln") {
				if(l0 == 1.0)// ln(1)=0
					AlgDouble(0.0)
				else if(l0 == E_CONST)// ln(e)= 1
					AlgDouble(1.0)
				else ar0;	
			}else ar0;
		}else 
			ar0;	
	});	

	if(it == ar)
		it
	else
		removeTrivialExp(it);		
}

execSimplifier(m: AlgExp, condOp: (string, AlgExp) -> AlgExp) -> AlgExp {
	arr = extractArgs(m);

	if(length(arr) < 2)
		m
	else 
	{
		newL = detectAndReplace(arr[0], condOp);
		newR = detectAndReplace(arr[1], condOp);

		op = detectType(m);
		condOp(op, createStruct(op, newL, detectAndReplace(arr[1], condOp)));
	}
}

detectAndReplace(ar:AlgExp, condOp) -> AlgExp {
	switch(ar) {
		AlgDouble(val): 
			ar;
		AlgVar(var):
			ar;
		default:
			execSimplifier(ar, condOp);
	}
}

extractArgs(ar:AlgExp) -> [AlgExp] {
	switch(ar) {
		AlgDiv(up, down): 
			[up,down];
		AlgMin(l, r): 
			[l,r];
		AlgSum(l, r): 
			[l,r];
		AlgMult(l, r): 
			[l,r];
		default:
			[ar];
	}	
}

isAtom(a) {
	switch(a) {
		AlgDouble(val): true;
		AlgVar(var): true;
		default: false;
	}
}

isNegInt(a) {
	p = getD(a); 
	p.second < 0.0;
}

extractSign(ar:AlgExp) -> Pair<int, AlgExp> {
	arr = extractArgs(ar);

	if(length(arr) < 2)
	{
		if(getD(ar).first && getD(ar).second < 0.0)
			Pair(-1, AlgDouble(abs(getD(ar).second)))
		else
			Pair(1, ar);
	}else 
	{
		op = detectType(ar);

		newL = extractSign(arr[0]);
		newR = extractSign(arr[1]);
		signMul = \l,r -> if(l*r > 0) 1 else -1;

		if(op == "*" || op == "/") 
			Pair(signMul(newL.first, newR.first), createStruct(op, newL.second, newR.second))
		else if(op == "-") {
			if(newL.first < 0 && newR.first > 0) //-x -y = -1 * (x+y)
				Pair(-1, createStruct("+", newL.second, newR.second))
			else if(newL.first > 0 && newR.first < 0) //x - (-y) = x + y
				Pair(1, createStruct("+", newL.second, newR.second))
			else if(newL.first < 0 && newR.first < 0) //-x - (-y) = -x + y
				Pair(1, createStruct("+", AlgMult(AlgDouble(-1.0), newL.second), newR.second))
			else
				Pair(1, createStruct(op, newL.second, newR.second));	
		} else if(op == "+") {
			if(newL.first < 0 && newR.first < 0) //-x + (-y) = -1 * (x+y)
				Pair(-1, createStruct("+", newL.second, newR.second))
			else if(newL.first > 0 && newR.first < 0) // x + (-y) = x - y
				Pair(1, createStruct("-", newL.second, newR.second))
			else if(newL.first < 0 && newR.first > 0) // -x + y = y - x
				Pair(1, createStruct("-", newR.second, newL.second))
			else
				Pair(1, createStruct(op, newL.second, newR.second));
		}else
			Pair(1, createStruct(op, newL.second, newR.second));
	}
}

getD(a:AlgExp) -> Pair<bool, double> {
	switch (a) {
		AlgDouble(val):
			Pair(true, val);
		default:
			Pair(false, 5.0);
	}
}
		
detectType(ar: AlgExp) -> string {
	switch (ar) {
		AlgDiv(up, down): "/";
		AlgMin(l, r): "-";
		AlgSum(l, r): "+";
		AlgMult(l, r): "*";
		AlgDouble(val): "int";
		AlgVar(var): "variable";	
	}
}

createStruct(op: string, l:AlgExp, r:AlgExp) -> AlgExp {
	if(op == "+")
	{
		AlgSum(l,r);
	}else if(op == "-")
	{
		AlgMin(l,r);
	}else if(op == "*")
	{
		AlgMult(l,r);
	}else if(op == "/")
	{
		AlgDiv(l,r);
	}else 
		l;
}