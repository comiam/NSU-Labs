package org.nsu.fit.tests.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.qameta.allure.Feature;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import org.nsu.fit.services.log.Logger;
import org.nsu.fit.services.rest.RestClient;
import org.nsu.fit.services.rest.data.AccountTokenPojo;
import org.nsu.fit.services.rest.data.CustomerPojo;
import org.nsu.fit.services.rest.data.SubscriptionPojo;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.io.IOException;
import java.util.UUID;

public class RemoveCustomerSubscriptionTest {
    RestClient client;
    CustomerPojo customerPojo;
    AccountTokenPojo token;
    AccountTokenPojo adminToken;

    @BeforeClass
    public void createCustomer() {
        client = new RestClient();
        adminToken = client.authenticate("admin", "setup");
        customerPojo = client.createAutoGeneratedCustomer(adminToken);
        token = new RestClient().authenticate(customerPojo.login, customerPojo.pass);
    }

    @Test(description = "Delete customer subscription")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Customer subscription")
    public void deleteSubscription() throws IOException {
        SubscriptionPojo pojo = new SubscriptionPojo();
        pojo.customerId = customerPojo.id;
        pojo.planId = UUID.randomUUID();
        pojo.planFee = 900;
        pojo.planDetails = "some plan";
        pojo.planName = "horoshiy plan, Walter!";

        SubscriptionPojo subscription = client.createSubscription(token, new ObjectMapper().writeValueAsString(pojo));
        Logger.debug("User subscription: " + Logger.toJson(subscription));

        String result = client.deleteSubscription(token, subscription.id);
        Logger.debug("Delete subscription: " + result);
    }

    @AfterClass
    public void checkSubscriptionsCount() {
        Assert.assertNotEquals(
                client.getSubscriptions(adminToken)
                        .stream()
                        .filter(x -> x.customerId == customerPojo.id)
                        .count(),
                0);
    }
}
